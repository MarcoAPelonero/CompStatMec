import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.animation as animation
from tqdm import tqdm

def read_ensemble_data(filename):
    """
    Reads the ensemble data file generated by the simulation.
    The file contains multiple snapshots separated by blank lines.
    The first line is a header: x y z vx vy vz energy
    """
    with open(filename, 'r') as f:
        lines = f.read().strip('\n').split('\n')

    header = lines[0].split()
    data_lines = [line for line in lines[1:] if line.strip() != ""]

    # Use tqdm to show progress
    raw_data = []
    with tqdm(total=len(data_lines), desc="Reading data") as pbar:
        for line in data_lines:
            try:
                raw_data.append(list(map(float, line.split())))
                pbar.update(1)
            except ValueError:
                print(f"Skipping invalid line: {line}")
                pbar.update(1)

    raw_data = np.array(raw_data)

    # Deduce number of particles by checking the pattern
    numParticles = None
    for i in range(1, raw_data.shape[0]):
        if np.allclose(raw_data[:i, :], raw_data[i:2 * i, :]):
            numParticles = i
            break

    if numParticles is None:
        raise ValueError("Could not deduce the number of particles. Check the input file.")

    numSnapshots = raw_data.shape[0] // numParticles
    if numSnapshots * numParticles != raw_data.shape[0]:
        print("Warning: Incomplete data at the end. Ignoring incomplete snapshot.")
        raw_data = raw_data[:numSnapshots * numParticles]

    data_reshaped = raw_data.reshape(numSnapshots, numParticles, 7)
    return header, data_reshaped

def animate_particles(data):
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    ax.set_xlim([-10, 10])
    ax.set_ylim([-10, 10])
    ax.set_zlim([-10, 10])

    particles, = ax.plot([], [], [], 'bo', markersize=2)

    def update(frame):
        positions = data[frame, :, 0:3]
        particles.set_data(positions[:, 0], positions[:, 1])
        particles.set_3d_properties(positions[:, 2])
        return particles,

    ani = animation.FuncAnimation(fig, update, frames=data.shape[0], interval=50, blit=True)
    plt.show()

if __name__ == "__main__":
    try:
        header, data = read_ensemble_data("ensemble_data.txt")
        print("Header:", header)
        print("Data shape:", data.shape)

        animate_particles(data)
    except Exception as e:
        print(f"Error: {e}")
